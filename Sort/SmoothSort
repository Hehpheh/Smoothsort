package Sort;

public class SmoothSort {

    private static int iteration;
    private static long time;

    static final int LP[] = { 1, 1, 3, 5, 9, 15, 25, 41, 67, 109,
            177, 287, 465, 753, 1219, 1973, 3193, 5167, 8361, 13529, 21891,
            35421, 57313, 92735, 150049, 242785, 392835, 635621, 1028457,
            1664079, 2692537, 4356617, 7049155, 11405773, 18454929, 29860703,
            48315633, 78176337, 126491971, 204668309, 331160281, 535828591,
            866988873};

    public static <C extends Comparable<? super C>> void sort(C[] m, int lo, int hi) {

        time = System.nanoTime();

        int head = lo;
        int p = 1;
        int pshift = 1;
        while (head < hi) {
            iteration++;
            if ((p & 3) == 3) {
                sift(m, pshift, head);
                p >>>= 2;
                pshift += 2;
            } else {
                if (LP[pshift - 1] >= hi - head) {
                    trinkle(m, p, pshift, head, false);
                } else {
                    sift(m, pshift, head);
                }
                if (pshift == 1) {
                    p <<= 1;
                    pshift--;
                } else {
                    p <<= (pshift - 1);
                    pshift = 1;
                }
            }
            p |= 1;
            head++;
        }
        trinkle(m, p, pshift, head, false);
        while (pshift != 1 || p != 1) {
            if (pshift <= 1) {
                int trail = Integer.numberOfTrailingZeros(p & ~1);
                p >>>= trail;
                pshift += trail;
            } else {
                p <<= 2;
                p ^= 7;
                pshift -= 2;
                trinkle(m, p >>> 1, pshift + 1, head - LP[pshift] - 1, true);
                trinkle(m, p, pshift, head - 1, true);
            }
            head--;
        }
        time = System.nanoTime() - time;
    }

    private static <C extends Comparable<? super C>> void sift(C[] m, int pshift, int head) {
        C val = m[head];
        while (pshift > 1) {
            int rt = head - 1;
            int lf = head - 1 - LP[pshift - 2];
            if (val.compareTo(m[lf]) >= 0 && val.compareTo(m[rt]) >= 0)
                break;
            if (m[lf].compareTo(m[rt]) >= 0) {
                m[head] = m[lf];
                head = lf;
                pshift -= 1;
            } else {
                m[head] = m[rt];
                head = rt;
                pshift -= 2;
            }
        }
        m[head] = val;
    }

    private static <C extends Comparable<? super C>> void trinkle(C[] m, int p, int pshift, int head, boolean isTrusty) {
        C val = m[head];
        while (p != 1) {
            int stepson = head - LP[pshift];
            if (m[stepson].compareTo(val) <= 0)
                break;
            if (!isTrusty && pshift > 1) {
                int rt = head - 1;
                int lf = head - 1 - LP[pshift - 2];
                if (m[rt].compareTo(m[stepson]) >= 0 || m[lf].compareTo(m[stepson]) >= 0)
                    break;
            }
            m[head] = m[stepson];
            head = stepson;
            int trail = Integer.numberOfTrailingZeros(p & ~1);
            p >>>= trail;
            pshift += trail;
            isTrusty = false;
        }
        if (!isTrusty) {
            m[head] = val;
            sift(m, pshift, head);
        }
    }

    public static long returnTime() {
        return time;
    }

    public static int returnIteration() {
        return iteration;
    }
}
